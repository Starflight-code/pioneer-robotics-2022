#include "include.cpp"
#include <array>
#include <math.h>

class algorithms {
private:
    const int _RANGE = 170;

public:
    /** Converts an integer or double into an int
     * @param x | any number (double or integer)
     * @return x converted to an int datatype
     */
    int castToInt(double x) { return (int)x; }
    /** Converts an integer or double into an int
     * @param x | any number (double or integer)
     * @return x converted to an int datatype
     */
    int castToInt(int x) { return x; }
    /** Converts an integer or double into an int
     * @param x | a motor value (integer w/ range [-170 <-> 170])
     * @param limiter | global limiter value (double w/ range [0 <-> 1])
     * @return motor value with limiter applies (integer)
     */
    int applyLimiter(int x, double limiter) {
        return (int)x * limiter;
    }
    /** Exponential control system allows high precision at lower speeds and access to higher speeds when desired
     * @param controlInput | a motor value (integer w/ range [-170 <-> 170])
     * @param exponent | a number which the motor value will be raised to (double)
     * @return a modified motor value that can be piped into a motor array (integer w/ range [-170 <-> 170])
     */
    int exponential_control(int controlInput, double exponent) {
        int negativeCarry = controlInput < 0 ? -1 : 1; // Carrys the negative, would otherwise be lost during exponent calcualtion
        return (int)negativeCarry * abs((_RANGE * pow(((double)abs(controlInput) / _RANGE), exponent)));
    }
    /** Impliments a two stick tank style control system, outputs motor array values
     * @param control_input | a controller output value (integer w/ range [-170 <-> 170])
     * @param limiter | a global limiter value (double w/ range [0 <-> 1])
     * @return a modified motor value that can be piped into a motor array (integer w/ range [-170 <-> 170])
     */
    int tank_control(int control_input, double limiter) {
        return applyLimiter(control_input, limiter);
    }
    /**
     * Impliments a two stick arcade style control system, outputs left and right motor array values
     * @param controlInput_y | Accepts input values for the left stick, y axis (int w/ range [-170 <-> 170])
     * @param controlInput_x | Accepts input values for the right stick, x axis (int w/ range [-170 <-> 170])
     * @param limiter | Accepts the global limiter value (double w/ range [0 <-> 1])
     * @return 2 motor values in an integer array, pipe these into the motor arrays [index 0, left | index 1, right]
     */
    std::array<int, 2> arcade_control(int controlInput_y, int controlInput_x, double limiter) {
        std::array<int, 2> motorOutput;
        // Designed to allow a mix of left/right forward/backwards inputs, so
        // the scaling coefficient prevents overflow (values >170)
        double sc = (abs(controlInput_y) + abs(controlInput_x));
        sc = sc < _RANGE ? _RANGE : sc;
        double scalingConstant = sc / _RANGE;
        // If it isn't limiting the value (making the value larger instead),
        // set it to do nothing (multiply by 1 (127/127))

        // Sets the motors to the values generated by the LEFT_Y and RIGHT_X
        // stick ranges Left_Y stick controls forward/backwards Right_X stick
        // controls left/right and local limiter still works
        motorOutput[0] = castToInt(((-(controlInput_y / scalingConstant +
                                       controlInput_x / scalingConstant))));
        motorOutput[1] = castToInt(((controlInput_y / scalingConstant -
                                     controlInput_x / scalingConstant)));
        for(int i = 0; i < motorOutput.size(); i++) { // Applys limiter
            motorOutput[i] = applyLimiter(motorOutput[i], limiter);
        }
        return motorOutput;
    }
};